<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="773a590f-fa6d-4c03-831a-271c056bd2e8" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/src/main/scala/com/smola/exceptions/exercises/LengthMismatchException.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/scala/com/smola/functionalprogramming/exercises/ScalarProduct.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/scala/com/smola/functionalprogramming/exercises/ScalarProduct.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/scala/com/smola/functionalprogramming/exercises/ScalarProductTest.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/scala/com/smola/functionalprogramming/exercises/ScalarProductTest.scala" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-3.1.2/classes/com/smola/functionalprogramming/exercises/ScalarProduct$.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-3.1.2/classes/com/smola/functionalprogramming/exercises/ScalarProduct$.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-3.1.2/classes/com/smola/functionalprogramming/exercises/ScalarProduct.class" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-3.1.2/classes/com/smola/functionalprogramming/exercises/ScalarProduct.class" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/target/scala-3.1.2/classes/com/smola/functionalprogramming/exercises/ScalarProduct.tasty" beforeDir="false" afterPath="$PROJECT_DIR$/target/scala-3.1.2/classes/com/smola/functionalprogramming/exercises/ScalarProduct.tasty" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="CodeStyleSettingsInfer">
    <option name="done" value="true" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectId" id="27jxKJwrP5yRIKI2MTFWUhG7IwE" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;project.structure.last.edited&quot;: &quot;Modules&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;
  }
}</component>
  <component name="RunManager" selected="ScalaTest.ScalarProductTest.Throws exception when vector dimensions do not match">
    <configuration name="ScalarProductTest.Can the compute the scalar product of (2, -1) and (1, 4)" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="Scala-Practice" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="com.smola.functionalprogramming.exercises.ScalarProductTest" />
      <option name="testName" value="Can the compute the scalar product of (2, -1) and (1, 4)" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ScalarProductTest.Throws exception when vector dimensions do not match" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="Scala-Practice" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="com.smola.functionalprogramming.exercises.ScalarProductTest" />
      <option name="testName" value="Throws exception when vector dimensions do not match" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SumAllIntegersTest.Can the function compute the sum of all the integers from 1 to 5" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="Scala-Practice" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="com.smola.basics.exercises.SumAllIntegersTest" />
      <option name="testName" value="Can the function compute the sum of all the integers from 1 to 5" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SumAllIntegersTest.Returns 0 when given 0 as an argument" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="Scala-Practice" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="com.smola.basics.exercises.SumAllIntegersTest" />
      <option name="testName" value="Returns 0 when given 0 as an argument" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="SumAllIntegersTest.Throws exception when argument is less than 1" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="Scala-Practice" />
      <option name="allowRunningInParallel" value="false" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="testClassPath" value="com.smola.basics.exercises.SumAllIntegersTest" />
      <option name="testName" value="Throws exception when argument is less than 1" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="ScalaTest.ScalarProductTest.Throws exception when vector dimensions do not match" />
        <item itemvalue="ScalaTest.ScalarProductTest.Can the compute the scalar product of (2, -1) and (1, 4)" />
        <item itemvalue="ScalaTest.SumAllIntegersTest.Throws exception when argument is less than 1" />
        <item itemvalue="ScalaTest.SumAllIntegersTest.Returns 0 when given 0 as an argument" />
        <item itemvalue="ScalaTest.SumAllIntegersTest.Can the function compute the sum of all the integers from 1 to 5" />
      </list>
    </recent_temporary>
  </component>
  <component name="ScalaProjectSettings">
    <option name="scala3DisclaimerShown" value="true" />
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="773a590f-fa6d-4c03-831a-271c056bd2e8" name="Changes" comment="" />
      <created>1649847233545</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1649847233545</updated>
    </task>
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/Scala_Practice$ScalarProductTest_Can_the_compute_the_scalar_product_of__2___1__and__1__4_.ic" NAME="ScalarProductTest.Can the compute the scalar product of (2, -1) and (1, 4) Coverage Results" MODIFIED="1650616938688" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
    <SUITE FILE_PATH="coverage/Scala_Practice$SumAllIntegersTest_Throws_exception_when_argument_is_less_than_1.ic" NAME="SumAllIntegersTest.Throws exception when argument is less than 1 Coverage Results" MODIFIED="1650587030561" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="idea" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" />
  </component>
</project>